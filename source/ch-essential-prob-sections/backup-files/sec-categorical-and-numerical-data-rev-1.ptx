<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-data-types-for-machine-learning" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Data Types for Machine Learning</title>
  <introduction>
    <p>
      Understanding the types of data you encounter in machine learning is crucial for effective preprocessing and model building. Data types determine how you clean, transform, and encode data for algorithms, which typically require numerical inputs. This section covers three key distinctions: structured vs. unstructured data, sequence vs. non-sequence data, and numerical vs. categorical (including ordinal) data. We’ll use Pandas to demonstrate handling these data types, focusing on practical examples relevant to machine learning workflows.
    </p>
    <p>
      Machine learning models often require numerical representations, so preprocessing steps like encoding categorical data, scaling numerical data, or embedding unstructured data are essential. A sample dataset of student records will illustrate these concepts throughout.
    </p>
  </introduction>
  <subsection xml:id="subsec-structured-vs-unstructured">
    <title>Structured vs. Unstructured Data</title>
    <p>
      <alert>Structured Data</alert>: Organized in a tabular format (rows and columns), like a spreadsheet or database table. Each row represents a data point (e.g., a student), and each column represents a feature (e.g., age, score). Structured data is common in machine learning for tasks like classification or regression.
    </p>
    <p>
      <alert>Unstructured Data</alert>: Lacks a predefined format, such as text, images, audio, or video. For example, student essays or profile pictures are unstructured. Machine learning often requires transforming unstructured data into structured formats (e.g., word embeddings for text).
    </p>
    <p>
      <alert>Example:</alert> A student dataset (structured) vs. student essays (unstructured).
    </p>
    <program language="python" line-numbers="yes">
      <title>Structured student data in Pandas</title>
      <code>

      import pandas as pd

      # Structured data: student records
      data = {
          'Name': ['Alice', 'Bob', 'Carol', 'Dave', 'Eve'],
          'Gender': ['F', 'M', 'F', 'M', 'F'],
          'Education_Level': ['Bachelor', 'Master', 'High School', 'PhD', 'Bachelor'],
          'Age': [25, 30, 27, 22, 28],
          'Score': [85.5, 90.0, 88.0, 76.5, None]
      }
      df = pd.DataFrame(data)
      print(df)

      # Unstructured data: student essays (example text)
      essays = ["Alice's essay on AI ethics...", "Bob's essay on machine learning..."]
      print("\nSample essay:", essays[0][:20])

      </code>
    </program>
    <p>
      Output (structured data as table):
    </p>
    <table xml:id="tab-student-dataframe">
      <title>Student DataFrame</title>
      <tabular>
        <row header="yes">
          <cell>Name</cell> <cell>Gender</cell> <cell>Education_Level</cell> <cell>Age</cell> <cell>Score</cell>
        </row>
        <row>
          <cell>Alice</cell> <cell>F</cell> <cell>Bachelor</cell> <cell>25</cell> <cell>85.5</cell>
        </row>
        <row>
          <cell>Bob</cell> <cell>M</cell> <cell>Master</cell> <cell>30</cell> <cell>90.0</cell>
        </row>
        <row>
          <cell>Carol</cell> <cell>F</cell> <cell>High School</cell> <cell>27</cell> <cell>88.0</cell>
        </row>
        <row>
          <cell>Dave</cell> <cell>M</cell> <cell>PhD</cell> <cell>22</cell> <cell>76.5</cell>
        </row>
        <row>
          <cell>Eve</cell> <cell>F</cell> <cell>Bachelor</cell> <cell>28</cell> <cell>NaN</cell>
        </row>
      </tabular>
    </table>
    <p>
      Unstructured data like essays requires preprocessing (e.g., tokenization, embeddings) for machine learning, covered later in this section.
    </p>
  </subsection>
  <subsection xml:id="subsec-sequence-vs-non-sequence">
    <title>Sequence vs. Non-Sequence Data</title>
    <p>
      <alert>Sequence Data</alert>: Data where the order of data points matters, such as time series, text, or speech. For example, a student’s daily study hours over a month is sequence data, where temporal order affects analysis.
    </p>
    <p>
      <alert>Non-Sequence Data</alert>: Data where order is irrelevant, such as static student records. Most tabular datasets in machine learning are non-sequence.
    </p>
    <p>
      <alert>Example:</alert> A time series of a student’s study hours.
    </p>
    <program language="python" line-numbers="yes">
      <title>Sequence data example</title>
      <code>

      import pandas as pd
      import numpy as np
      import matplotlib.pyplot as plt

      # Sequence data: daily study hours
      dates = pd.date_range('2025-01-01', periods=10, freq='D')
      study_hours = pd.Series([2, 3, 0, 4, 2, 5, 1, 3, 2, 4], index=dates, name='Study_Hours')
      print(study_hours)

      # Plot
      plt.figure(figsize=(8, 4))
      study_hours.plot()
      plt.xlabel('Date')
      plt.ylabel('Study Hours')
      plt.title('Daily Study Hours (Sequence Data)')
      plt.grid(True, alpha=0.3)
      plt.savefig('time-series.png', dpi=300)
      plt.show()

      </code>
    </program>
    <figure xml:id="fig-time-series">
      <caption>Time series of daily study hours.</caption>
      <image source="./images/essential-probability-and-statistics/time-series.png">
        <shortdescription>Time series plot of study hours.</shortdescription>
      </image>
    </figure>
    <p>
      Sequence data requires models like RNNs or LSTMs, which account for temporal dependencies, unlike non-sequence data used in standard regression or classification.
    </p>
  </subsection>
  <subsection xml:id="subsec-numerical-categorical-ordinal">
    <title>Numerical, Categorical, and Ordinal Data</title>
    <p>
      Machine learning datasets often combine numerical, categorical, and ordinal data, each requiring specific preprocessing.
    </p>
    <ol>
      <li>
        <p>
          <alert>Numerical Data</alert>: Represents measurable quantities, either <alert>discrete</alert> (countable, e.g., number of courses taken) or <alert>continuous</alert> (infinite precision, e.g., test scores, age). Numerical data often needs scaling (e.g., standardization) for machine learning algorithms like SVMs or neural networks.
        </p>
        <p>
          Example: In the student dataset, <c>Age</c> and <c>Score</c> are numerical. Let’s visualize the score distribution.
        </p>
        <figure xml:id="fig-numerical-histogram">
          <caption>Histogram of student scores (numerical data).</caption>
          <image source="./images/essential-probability-and-statistics/numerical-histogram.png">
            <shortdescription>Histogram of numerical data.</shortdescription>
          </image>
        </figure>
        <program language="python" line-numbers="yes">
          <title>Histogram of numerical data</title>
          <code>

          import pandas as pd
          import matplotlib.pyplot as plt

          # Assuming df from previous example
          df['Score'].hist(bins=5, edgecolor='black', alpha=0.7)
          plt.xlabel('Score')
          plt.ylabel('Frequency')
          plt.title('Distribution of Student Scores')
          plt.grid(True, alpha=0.3)
          plt.savefig('numerical-histogram.png', dpi=300)
          plt.show()

          </code>
        </program>
        <p>
          Preprocessing: Scale numerical data to ensure equal contribution to models.
        </p>
        <program language="python" line-numbers="yes">
          <title>Scaling numerical data</title>
          <code>
          from sklearn.preprocessing import StandardScaler

          # Scale Age and Score
          scaler = StandardScaler()
          df[['Age', 'Score']] = scaler.fit_transform(df[['Age', 'Score']].fillna(df['Score'].mean()))
          print(df[['Age', 'Score']])
          </code>
        </program>
      </li>
      <li>
        <p>
          <alert>Categorical Data</alert>: Represents discrete, unordered labels (e.g., Gender: {F, M}). Machine learning requires numerical encoding, typically via one-hot encoding.
        </p>
        <p>
          <alert>One-Hot Encoding</alert>: For a categorical variable with <m>C</m> categories, each category is represented by a <m>C</m>-dimensional binary vector. For Gender (F, M), <m>C=2</m>:
          <me>
            \text{F} = [1, 0], \ \text{M} = [0, 1]
          </me>
        </p>
        <p>
          Example: Encode Gender in the student dataset.
        </p>
        <program language="python" line-numbers="yes">
          <title>One-hot encoding categorical data</title>
          <code>
          # One-hot encoding
          df_encoded = pd.get_dummies(df, columns=['Gender'], prefix='Gender')
          print(df_encoded)
          </code>
        </program>
        <p>
          Visualize Gender counts:
        </p>
        <figure xml:id="fig-categorical-bar">
          <caption>Bar plot of Gender counts (categorical data).</caption>
          <image source="./images/essential-probability-and-statistics/categorical-bar.png">
            <shortdescription>Bar plot of categorical data.</shortdescription>
          </image>
        </figure>
        <program language="python" line-numbers="yes">
          <title>Bar plot of categorical data</title>
          <code>

          import pandas as pd
          import matplotlib.pyplot as plt

          # Assuming df from previous example
          df['Gender'].value_counts().plot(kind='bar', edgecolor='black', alpha=0.7)
          plt.xlabel('Gender')
          plt.ylabel('Count')
          plt.title('Distribution of Gender')
          plt.grid(True, alpha=0.3)
          plt.savefig('categorical-bar.png', dpi=300)
          plt.show()

          </code>
        </program>
        <p>
          For high-cardinality categorical data (e.g., thousands of categories like city names), one-hot encoding creates too many features. Instead, use embeddings (e.g., word2vec for text), discussed below.
        </p>
      </li>
      <li>
        <p>
          <alert>Ordinal Data</alert>: Categorical data with a defined order (e.g., Education Level: High School &#8804; Bachelor &#8804; Master &#8804; PhD). The order matters, but differences are not necessarily quantitative.
        </p>
        <p>
          Example: Encode Education Level as an ordered category.
        </p>
        <program language="python" line-numbers="yes">
          <title>Encoding ordinal data</title>
          <code>
          from pandas.api.types import CategoricalDtype

          # Define ordered category
          cat_type = CategoricalDtype(categories=['High School', 'Bachelor', 'Master', 'PhD'], ordered=True)
          df['Education_Level'] = df['Education_Level'].astype(cat_type)
          print(df['Education_Level'])

          # Integer encoding for ML
          education_order = {'High School': 1, 'Bachelor': 2, 'Master': 3, 'PhD': 4}
          df['Education_Level_Code'] = df['Education_Level'].map(education_order)
          print(df[['Education_Level', 'Education_Level_Code']])
          </code>
        </program>
        <p>
          Visualize Education Level:
        </p>
        <figure xml:id="fig-ordinal-bar">
          <caption>Ordered bar plot of Education Level.</caption>
          <image source="./images/essential-probability-and-statistics/ordinal-bar.png">
            <shortdescription>Ordered bar plot of ordinal data.</shortdescription>
          </image>
        </figure>
        <program language="python" line-numbers="yes">
          <title>Ordered bar plot of ordinal data</title>
          <code>

          import pandas as pd
          import matplotlib.pyplot as plt

          # Assuming df from previous example
          df['Education_Level'].value_counts().loc[['High School', 'Bachelor', 'Master', 'PhD']].plot(kind='bar', edgecolor='black', alpha=0.7)
          plt.xlabel('Education Level')
          plt.ylabel('Count')
          plt.title('Distribution of Education Level (Ordered)')
          plt.grid(True, alpha=0.3)
          plt.savefig('ordinal-bar.png', dpi=300)
          plt.show()

          </code>
        </program>
        <p>
          <alert>Safe Ordinal Encoding</alert>: Use integer encoding for tree-based models (e.g., Random Forest), which respect order without assuming equal intervals. Avoid one-hot encoding, as it discards order.
        </p>
      </li>
    </ol>
    <p>
      <alert>Combined Example:</alert> Preprocess the student dataset and visualize relationships.
    </p>
    <program language="python" line-numbers="yes">
      <title>Preprocessing mixed data types</title>
      <code>
      # --- MIXED DATA PREPROCESSING ---
      import pandas as pd
      from sklearn.preprocessing import StandardScaler

      # Assuming df from previous example
      # Handle missing values
      df['Score'] = df['Score'].fillna(df['Score'].mean())

      # One-hot encode Gender
      df = pd.get_dummies(df, columns=['Gender'], prefix='Gender')

      # Integer encode Education_Level
      education_order = {'High School': 1, 'Bachelor': 2, 'Master': 3, 'PhD': 4}
      df['Education_Level_Code'] = df['Education_Level'].map(education_order)

      # Scale numerical columns
      scaler = StandardScaler()
      df[['Age', 'Score']] = scaler.fit_transform(df[['Age', 'Score']])

      print(df)

      </code>
    </program>
    <p>
      Visualize relationships:
    </p>
    <figure xml:id="fig-pairplot">
      <caption>Pairplot of numerical and encoded ordinal data.</caption>
      <image source="./images/essential-probability-and-statistics/pairplot.png">
        <shortdescription>Pairplot of mixed data types.</shortdescription>
      </image>
    </figure>
    <program language="python" line-numbers="yes">
      <title>Pairplot of mixed data</title>
      <code>

      import seaborn as sns
      import pandas as pd

      # Assuming df from previous example
      sns.set_theme(style="whitegrid")
      sns.pairplot(df[['Age', 'Score', 'Education_Level_Code']], diag_kind='kde')
      plt.savefig('pairplot.png', dpi=300)
      plt.show()

      </code>
    </program>
  </subsection>
  <subsection xml:id="subsec-unstructured-text">
    <title>Handling Unstructured Text Data</title>
    <p>
      Text data, a common form of unstructured data, requires special preprocessing. For example, student essays can be converted to numerical representations using word embeddings (e.g., word2vec, BERT) for high-cardinality categorical data or text analysis.
    </p>
    <p>
      <alert>Example:</alert> Tokenize and embed a sample essay.
    </p>
    <program language="python" line-numbers="yes">
      <title>Basic text preprocessing</title>
      <code>
      # --- TEXT PREPROCESSING ---
      from sklearn.feature_extraction.text import CountVectorizer

      # Sample essays
      essays = ["AI ethics is critical for fairness", "Machine learning improves predictions"]
      vectorizer = CountVectorizer()
      X = vectorizer.fit_transform(essays)
      print("Feature names:", vectorizer.get_feature_names_out())
      print("Bag-of-words matrix:\n", X.toarray())

      </code>
    </program>
    <p>
      For advanced text processing, use libraries like Hugging Face’s Transformers to generate embeddings for machine learning models.
    </p>
  </subsection>
  <conclusion>
    <p>
      Machine learning requires careful handling of data types: structured data for tabular analysis, unstructured data like text for specialized preprocessing, sequence data for temporal models, and numerical/categorical/ordinal data for appropriate encoding. Use Pandas for structured data, scale numerical features, encode categorical and ordinal data thoughtfully, and preprocess unstructured/sequence data with libraries like scikit-learn or Hugging Face. Practice with datasets from <url href="https://www.kaggle.com/datasets" visual="kaggle.com">Kaggle</url> to master these techniques.
    </p>
  </conclusion>
</section>